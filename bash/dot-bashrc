#!/bin/bash
# vim:foldmethod=marker:foldlevel=0

# shellcheck disable=2155,1091

# {{{ finish non-interactive session logging setup

if [[ $- = *i* ]]; then
    IS_INTERACTIVE=y
    @new_log_file() { true; }
    @log_export() { true; }
fi

BASH_LOG="$BASH_PROFILE_LOG"

@log_bash_export() {
    @log_export BASH_LOG "$@"
}

# }}} finish non-interactive session logging setup

# {{{ User public information

export NAME="Gabriel Manoel Barbosa"
export EMAIL="gabrielmanoel13@gmail.com"
export GITREMOTE="https://github.com/$USER"

# fingerprints of my pgp keys, for easy access.
export PGP_AUTH="B2A2F09A999DA3DE"
export PGP_SIGN="39209B06564DAE80"
export PGP_ENCR="7E1CB15FEC0409A9"

export GITREMOTE_REPOS="shell-config"
export GITREMOTE_SHELL_CONFIG="$GITREMOTE/shell-config"

export PREFER_LIB_LICENSE="mit"
export PREFER_BIN_LICENSE="mit"

# }}} User public information

# {{{ Shell history

if [ ! "$HISTFILE" ]; then
    # unclutter $HOME by moving the .bash_history file.
    export HISTFILE="$BASH_CACHE_HOME/history"
    # The timestamp format when using the 'history' tool.
    export HISTTIMEFORMAT="%T * "
    # The number of commands which is kept by the shell.
    export HISTSIZE=100
    # The maximum number of lines $HISTFILE can contain before being truncated.
    export HISTFILESIZE=1000
    # ignoreboth    ignore duplicate lines or lines starting with space.
    # erasedups     lines in the history similar to the current one is removed.
    export HISTCONTROL='ignoreboth:erasedups'
    #export HISTIGNORE='sudo *:source *:. *:gpg*:fc *:history *'

    @log_bash_export HISTFILE HISTTIMEFORMAT HISTSIZE HISTFILESIZE HISTCONTROL
fi

# }}}

[[ $- != *i* ]] && return

# {{{ setup logging for a interactive session

export -f @log_bash_export @log_export @new_log_file

# these variables are setup in .bash_profile and contains the definitions of
# @new_log_file and @log_export. These are only really useful when not in a
# login shell, since you cannot export functions from bash_profile.
if [ "$BASH_PROFILE_NEW_LOG_FILE" ] && [ "$BASH_PROFILE_LOG_EXPORT" ]; then
    # TODO should allow for better customization of the logfile location and/or
    #      name.
    # TODO csv-style log output and a dedicated tool to parse and display it.

    # @new_log_file should not be overwritten, so we defined it as readonly.
    if [ ! "$(type -t @new_log_file)" ]; then
        eval "$BASH_PROFILE_NEW_LOG_FILE"
        readonly -f @new_log_file
    fi

    if [ ! "$(type -t @log_export)" ]; then
        eval "$BASH_PROFILE_LOG_EXPORT"
        readonly -f @log_export
    fi

    unset BASH_PROFILE_NEW_LOG_FILE BASH_PROFILE_LOG_EXPORT
fi

# }}} setup logging for a interactive session

export -f @log_bash_export @log_export @new_log_file
export BASH_LOG="$(@new_log_file "shell_$$")"

# {{{ Setup GnuPG

if [ "$SSH_AUTH_SOCK" != \
    "$(command gpgconf --list-dirs agent-sshsocket)" ]; then
    # kill the running instance of ssh-agent, if any
    [ "$SSH_AGENT_PID" ] && command ssh-agent -k &>/dev/null
    unset SSH_AGENT_PID
    if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
        export SSH_AUTH_SOCK="$(command gpgconf --list-dirs agent-ssh-socket)"
        @log_bash_export SSH_AUTH_SOCK
    fi
    # start gpg-agent
    command gpg-connect-agent /bye &>/dev/null
fi

export GPG_TTY=$(tty)
@log_bash_export GPG_TTY

# }}}

# {{{ additional shell configuration files

eval "$(dircolors "$BASH_CONFIG_HOME/dircolors")"

. "$BASH_CONFIG_HOME/shell_options.sh"

# TODO make my own programmable completion script
test -r "/usr/share/bash-completion/bash_completion" && \
    . "/usr/share/bash-completion/bash_completion"

# }}}

# {{{ source scripts

. "cmdlchk.sh"
. "comp.sh"
. "report.sh"
. "txt.sh"
. "txt_alt.sh"
. "prompt.sh"
. "aliases.sh"

# }}}

# {{{ default programs

@chkbin "$BROWSER"
@chkbin "$EDITOR"
@chkbin "$GIT_EDITOR"

# }}}

unset IS_INTERACTIVE
